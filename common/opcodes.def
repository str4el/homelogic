/*
 * Copyright (C) 2013 Stephan Reinhard <Stephan-Reinhard@gmx.de>
 *
 * This file is part of Homelogic.
 *
 * Homelogic is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Homelogic is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Foobar.  If not, see <http://www.gnu.org/licenses/>.
 */

OPCODE(oc_load               , "LD"   , 0x00, DT_ANY                      , false)
OPCODE(oc_load_brace         , "LD("  , 0x01, DT_ANY                      , false)
OPCODE(oc_load_not           , "LDN"  , 0x02, DT_ANY                      , false)
OPCODE(oc_load_not_brace     , "LDN(" , 0x03, DT_ANY                      , false)

OPCODE(oc_store              , "ST"   , 0x06, DT_BOOL | DT_BYTE | DT_WORD , true )
OPCODE(oc_store_not          , "STN"  , 0x07, DT_BOOL | DT_BYTE | DT_WORD , true )

OPCODE(oc_set                , "S"    , 0x0A, DT_BOOL | DT_COUNTER        , true )
OPCODE(oc_reset              , "R"    , 0x0B, DT_BOOL | DT_COUNTER        , true )

OPCODE(oc_and                , "AND"  , 0x10, DT_ANY                      , false)
OPCODE(oc_and_brace          , "AND(" , 0x11, DT_ANY                      , false)
OPCODE(oc_and_not            , "ANDN" , 0x12, DT_ANY                      , false)
OPCODE(oc_and_not_brace      , "ANDN(", 0x13, DT_ANY                      , false)

OPCODE(oc_or                 , "OR"   , 0x16, DT_ANY                      , false)
OPCODE(oc_or_brace           , "OR("  , 0x17, DT_ANY                      , false)
OPCODE(oc_or_not             , "ORN"  , 0x18, DT_ANY                      , false)
OPCODE(oc_or_not_brace       , "ORN(" , 0x19, DT_ANY                      , false)

OPCODE(oc_xor                , "XOR"  , 0x1C, DT_ANY                      , false)
OPCODE(oc_xor_brace          , "XOR(" , 0x1D, DT_ANY                      , false)
OPCODE(oc_xor_not            , "XORN" , 0x1E, DT_ANY                      , false)
OPCODE(oc_xor_not_brace      , "XORN(", 0x1F, DT_ANY                      , false)

OPCODE(oc_edge_positive      , "EP"   , 0x20, DT_BOOL                     , true )
OPCODE(oc_edge_negative      , "EN"   , 0x21, DT_BOOL                     , true )

OPCODE(oc_add                , "ADD"  , 0x30, DT_ANYWORD                  , false)
OPCODE(oc_add_brace          , "ADD(" , 0x31, DT_ANYWORD                  , false)

OPCODE(oc_sub                , "SUB"  , 0x34, DT_ANYWORD                  , false)
OPCODE(oc_sub_brace          , "SUB(" , 0x35, DT_ANYWORD                  , false)

OPCODE(oc_mul                , "MUL"  , 0x38, DT_ANYWORD                  , false)
OPCODE(oc_mul_brace          , "MUL(" , 0x39, DT_ANYWORD                  , false)

OPCODE(oc_div                , "DIV"  , 0x3C, DT_ANYWORD                  , false)
OPCODE(oc_div_brace          , "DIV(" , 0x3D, DT_ANYWORD                  , false)

OPCODE(oc_greater_then       , "GT"   , 0x40, DT_ANYWORD                  , false)
OPCODE(oc_greater_then_brace , "GT("  , 0x41, DT_ANYWORD                  , false)
OPCODE(oc_greater_equal      , "GE"   , 0x42, DT_ANYWORD                  , false)
OPCODE(oc_greater_equal_brace, "GE("  , 0x43, DT_ANYWORD                  , false)

OPCODE(oc_equal              , "EQ"   , 0x46, DT_ANYWORD                  , false)
OPCODE(oc_equal_brace        , "EQ("  , 0x47, DT_ANYWORD                  , false)
OPCODE(oc_not_equal          , "NE"   , 0x48, DT_ANYWORD                  , false)
OPCODE(oc_not_equal_brace    , "NE("  , 0x49, DT_ANYWORD                  , false)

OPCODE(oc_less_than          , "LT"   , 0x4C, DT_ANYWORD                  , false)
OPCODE(oc_less_than_brace    , "LT("  , 0x4D, DT_ANYWORD                  , false)
OPCODE(oc_less_equal         , "LE"   , 0x4E, DT_ANYWORD                  , false)
OPCODE(oc_less_equal_brace   , "LE("  , 0x4F, DT_ANYWORD                  , false)

OPCODE(oc_close_brace        , ")"    , 0x70, DT_NONE                     , false)

OPCODE(oc_timer_on           , "TON"  , 0xA0, DT_TIMER                    , true)
OPCODE(oc_timer_off          , "TOFF" , 0xA1, DT_TIMER                    , true)
OPCODE(oc_timer_pulse        , "TP"   , 0xA2, DT_TIMER                    , true)

OPCODE(oc_counter_up         , "CU"   , 0xA8, DT_COUNTER                  , true)
OPCODE(oc_counter_down       , "CD"   , 0xA9, DT_COUNTER                  , true)

OPCODE(oc_end_of_network     , "***"  , 0xFE, DT_NONE                     , false)
OPCODE(oc_end_of_program     , "END"  , 0xFF, DT_NONE                     , false)
